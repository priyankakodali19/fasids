@model WebApplication3.Models.ViewModel.ProductDataView2
@{
    ViewBag.Title = "ProductAdminView";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js"></script>
<style>
    ul {
        padding-left: 15%;
         padding-right: 2%;
    }
    .disclaimer {
    background:  none repeat scroll 0 0;
    background-color: #f2dede;
    border-color: #eed3d7;
    width: 100%;
}

.disclaimer h4 {
    color: #500000;
    font-family: 'Raleway', sans-serif;
    font-size: 14px;
    margin: 0;
    padding: 5px 0;
}
   
</style>
<script type="text/javascript">
    $('document').ready(function () {
        if ('@(TempData["Value"])' == 1) {
            $('#product_sucess').toggle();
        }
        
    });
</script>
 




<h2 class="title text-center">FIRE ANT PRODUCTS</h2>

<section class="disclaimer">
    <div class="container">
        <div class="row">
            <div class="col-sm-1">
                <h4>Disclaimer :</h4>
            </div>
            <div class="col-sm-11">
                <marquee id="scroll_news">
                    <div onmouseout="document.getElementById('scroll_news').start();" onmouseover="document.getElementById('scroll_news').stop();">
                        <h4>Because of the constantly changing availability of fire ant insecticides, it is virtually impossible to include
                            every product on the market. Mention of a product on this site does not imply an endorsement by Texas A&M AgriLife Extension Service, the Southern Region IPM Center or any cooperating state. Lack of
                            mention does not imply that the product is not an effective fire ant control product.</h4>
                    </div>
                </marquee>
            </div>
        </div>
    </div>
</section>
  <div class="divide10"></div> 

<div ng-app="productManagerApp" ng-controller="productDefaultCtrl">
     
<div >
    <div id="product_sucess" style="float: left; padding: 0.5%; margin-bottom:1%!important; display:none;" class="alert alert-success fade in" >
        <a href="#" class="close" data-dismiss="alert">&times;</a>
        <strong>Success!</strong> New product is added!.
    </div>

    <btn style="float:right; margin-bottom:1%;" id="AddProduct" input type="submit" class="btn btn-theme-bg" ng-click="AddProduct()"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Add Product </btn>


</div>
<div>
    <table width="100%" id="ProductsList" data-toggle="table" class="table table-striped table-bordered table-condensed table-hover">
        <thead id="ProductsThead">
            <tr>
                <th rowspan="2" data-field="ActiveIngredient" data-sortable="true"><div>Active</div><div>Ingredient</div> </th>
                <th rowspan="2" data-field="ProductName" data-sortable="true"><div>Product</div><div>Name</div> </th>
                <th rowspan="2" data-field="ProductManufacturer" data-sortable="true"><div>Product</div><div>Manufacturer</div></th>
                <th rowspan="2" data-field="PhysicalForm" data-sortable="false"><div>Physical</div><div>Form</div> </th>
                <th rowspan="2" data-field="IsSynthetic" data-sortable="false"><div>Synthetic</div><div>or Natural</div> </th>
                <th rowspan="2" data-field="TypeOfControlUsage" data-sortable="false"><div>Control</div><div>Method</div> </th>
               @* <th rowspan="2" data-field="TypeOfTreatmentUsage" data-sortable="false"><div>Treatment</div><div> Method</div> </th>*@
                <th rowspan="2" data-field="TypeOfLand" data-sortable="false"><div>Land Type</div></th>
                <th colspan="2" data-field="UrbanTreatmentSite" data-sortable="false"><div>Urban </div><div>Treatment Sites</div></th>
                <th colspan="2" data-field="AgriTreatmentSite" data-sortable="false"><div>Agriculture</div><div>Treatment Sites</div></th>
                <th rowspan="2" data-field="ProductCoverage" data-sortable="false"><div>Suggested </div><div>Product</div><div>Use Rate</div></th>
                <th rowspan="2" data-field="ModifyProduct" data-sortable="false"><div>Modify</div><div>Product</div></th>
                
            </tr>
            <tr>
                <th>Broadcast</th>
                <th>Mound</th>
                <th>Broadcast</th>
                <th>Mound</th>
               
            </tr>
        </thead>
        <tbody>
    @foreach (var i in Model.Products)
            {
   
                <tr>
                    <td> @Html.DisplayFor(m => i.ActiveIngredient)</td>
                    <td><a href=@Html.DisplayFor(m => i.ProductUrl) target="_blank"> @Html.DisplayFor(m => i.ProductName)</a></td>
                    <td> @Html.DisplayFor(m => i.ProductManufacturer)</td>
                    <td> @Html.DisplayFor(m => i.PhysicalForm)</td>
                    <td> @Html.DisplayFor(m => i.IsSynthetic)</td>
                    <td> @Html.DisplayFor(m => i.ProductControlMethod)</td>
                   @* <td>
                        <ul>
                            @for (int x = 0; x < i.ProductTreatmentMethod.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.ProductTreatmentMethod[x])</li>
                            }
                        </ul>
                    </td>*@
                    <td> 
                         <ul>
                            @for (int x = 0; x < i.TypeOfLand2.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.TypeOfLand2[x])</li>
                            }
                        </ul>
                      
                    </td>
                    <td >
                        <ul>
                            @for (int x = 0; x < i.UrbanTreatmentSitesBroadcast.Count; x++)
                            {
                                <li >@Html.DisplayFor(m => i.UrbanTreatmentSitesBroadcast[x])</li>
                            }
                        </ul>
                        
                    </td>
                    <td>
                        <ul>
                            @for (int x = 0; x < i.UrbanTreatmentSitesMound.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.UrbanTreatmentSitesMound[x])</li>
                            }
                        </ul>
                        
                    </td>
                    <td>
                        <ul>
                            @for (int x = 0; x < i.AgriTreatmentSitesBroadcast.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.AgriTreatmentSitesBroadcast[x])</li>
                            }
                        </ul>
                       
                    </td>
                    <td >
                        <ul>
                            @for (int x = 0; x < i.AgriTreatmentSitesMound.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.AgriTreatmentSitesMound[x])</li>
                            }
                        </ul>
                       
                    </td>
                    <td>
                        <ul>
                            @for (int x = 0; x < i.ProductMeasurementUnit2.Count; x++)
                            {
                                <li>@Html.DisplayFor(m => i.ProductMeasurementUnit2[x])</li>
                            }
                        </ul>   
                    </td>
                    <td>
                         @{
                             
                             
                             int product_id = i.ProductId;
                             if (i.ProductName.Equals("Maria's ants"))
                             {
                                 var ProductName2 = i.ProductName.Replace("\'","");
                                 var x = ProductName2;
                             }
                             var ProductName = i.ProductName.Replace("\'", "");
                            var ActiveIngredient= i.ActiveIngredient;
                            var ProductManufacturer=i.ProductManufacturer;
                             var ProductUrl=i.ProductUrl;
                            var PhysicalForm = i.PhysicalForm;
                             var IsSynthetic = i.IsSynthetic;
                            var PesticideClassification= "UnRestricted";
                            var TypeOfLand2 = "";

                            var AgriTreatmentSitesBroadcast = ""; var AgriTreatmentSitesMound = "";
                            var UrbanTreatmentSitesBroadcast = ""; var UrbanTreatmentSitesMound = "";
                           var  ProductTreatmentMethod = "";
                            if (i.TypeOfLand2 !=null)
                            {
                                TypeOfLand2 = string.Join(", ", i.TypeOfLand2);
                            }
                            
                            if (i.ProductTreatmentMethod != null)
                            {
                                ProductTreatmentMethod = string.Join(", ", i.ProductTreatmentMethod); 
                            }
                            if (i.AgriTreatmentSitesBroadcast != null)
                            {
                                AgriTreatmentSitesBroadcast = string.Join(", ", i.AgriTreatmentSitesBroadcast);
                               //AgriTreatmentSites = i.AgriTreatmentSites2;
                            }
                            if (i.AgriTreatmentSitesMound != null)
                            {
                                AgriTreatmentSitesMound = string.Join(", ", i.AgriTreatmentSitesMound);
                                //AgriTreatmentSites = i.AgriTreatmentSites2;
                            }
                            if (i.UrbanTreatmentSitesBroadcast != null)
                            {
                                UrbanTreatmentSitesBroadcast = string.Join(", ", i.UrbanTreatmentSitesBroadcast);
                            }
                            if (i.UrbanTreatmentSitesMound != null)
                            {
                                UrbanTreatmentSitesMound = string.Join(", ", i.UrbanTreatmentSitesMound);
                            }
                            var ProductControlMethod= i.ProductControlMethod;
                             var B_ProductMinUseRate= i.B_ProductMinUseRate;
                             var B_ProductMaxUseRate= i.B_ProductMaxUseRate;
                             var B_ProductMeasurementUnit= i.B_ProductMeasurementUnit;
                             var M_ProductMinUseRate= i.M_ProductMinUseRate;
                             var M_ProductMaxUseRate= i.M_ProductMaxUseRate;
                             var M_ProductMeasurementUnit = i.M_ProductMeasurementUnit;
                             
                            
                        }
                         <a style="cursor: pointer;" ng-click="EditProduct(@product_id,'@ProductName','@ActiveIngredient','@ProductManufacturer','@ProductUrl','@PhysicalForm','@PesticideClassification',
                             '@ProductControlMethod','@IsSynthetic','@TypeOfLand2','@ProductTreatmentMethod','@UrbanTreatmentSitesBroadcast','@UrbanTreatmentSitesMound','@AgriTreatmentSitesBroadcast','@AgriTreatmentSitesMound',@B_ProductMinUseRate,@B_ProductMaxUseRate,'@B_ProductMeasurementUnit',
                             @M_ProductMinUseRate,@M_ProductMaxUseRate,'@M_ProductMeasurementUnit')"><i class="fa fa-pencil-square-o" aria-hidden="true"></i>&nbsp;&nbsp;Edit</a>
                       <a style="cursor: pointer;" ng-click="DeleteProduct(@product_id)"><i class="fa fa-trash" aria-hidden="true"></i>&nbsp;Delete</a></td>
                </tr>
            }
        </tbody>
    </table>
</div>  

<div id="add-product-modal" tabindex="-1" role="dialog" class="modal fade" >
    <div class="modal-dialog" >
        <div class="modal-content" >
            <div class="modal-header">
                <div  ng-if="isedit==false">
                <button type="button" data-dismiss="modal" aria-label="Close" class="close"><span aria-hidden="true">×</span></button>
                <h4 class="modal-title">Add Product Details </h4></div>
                <div  ng-if="isedit==true">
                <button type="button" data-dismiss="modal" aria-label="Close" class="close"><span aria-hidden="true">×</span></button>
                <h4 class="modal-title">Edit Product Details </h4></div>
               
            </div>
            
            <div class="modal-body">
                <form novalidate="novalidate" name="productForm" class="form-horizontal productForm">
                    <div class="form-group row">
                        <label for="productName" class="col-sm-5 control-label text-right">
                            Product Name<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <input id="productName" type="text" placeholder="Enter product name" ng-model="product_details.ProductName" name="productName" required="required" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="activeIngredient" class="col-sm-5 control-label text-right">
                            Active Ingredient<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <input id="activeIngredient" type="text" placeholder="Enter Active Ingredient" ng-model="product_details.ActiveIngredient" name="activeIngredient" required="required" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="manufacturer" class="col-sm-5 control-label text-right">
                            Product Manufacturer<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <input id="manufacturer" type="text" placeholder="Enter Product Manufacturer" ng-model="product_details.ProductManufacturer" name="manufacturer" required="required" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="manu_url" class="col-sm-5 control-label text-right">
                            Manufacturer Url<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <input id="manu_url" type="text" placeholder="Enter Manufacturer Url" ng-model="product_details.ProductUrl" name="manu_url" required="required" class="form-control" />
                        </div>
                    </div>
                   @* <div class="form-group row">
                        <label for="physicalform" class="col-sm-5 control-label text-right">
                            Physical Form<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <input id="physicalform" type="text" placeholder="Enter Physical Form" ng-model="product_details.PhysicalForm" name="physicalform" required="required" class="form-control" />
                        </div>
                    </div>*@
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">
                             Physical Form<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <select ng-model="product_details.PhysicalForm" ng-options="PhysicalFormOption.value as PhysicalFormOption.optionText for PhysicalFormOption in PhysicalForm" required="required" name="PhysicalForm" class="form-control">
                                <option value="">(Pick One Type)</option>
                            </select>
                        </div><span ng-show="productForm.PhysicalForm.$touched &amp;&amp; productForm.PhysicalForm.$invalid">Please select type of use</span>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">
                            Synthetic/Natural<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <select ng-model="product_details.IsSynthetic" ng-options="SyntheticOption.value as SyntheticOption.optionText for SyntheticOption in SyntheticNatural" required="required" name="synthetic" class="form-control">
                                <option value="">(Pick One Type)</option>
                            </select>
                        </div><span ng-show="productForm.synthetic.$touched &amp;&amp; productForm.synthetic.$invalid">Please select type of use</span>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">
                           Pesticide Classification<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <select ng-model="product_details.PesticideClassification" ng-options="PestClassOption.value as PestClassOption.optionText for PestClassOption in TypeOfPestClass" required="required" name="typeOfPestClass" class="form-control">
                                <option value="">(Pick One Type Of Classification)</option>
                            </select>
                        </div><span ng-show="productForm.typeOfPestClass.$touched &amp;&amp; productForm.typeOfPestClass.$invalid">Please select type of use</span>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">Type of Control Method<span>*</span></label>
                        <div class="col-sm-7">
                            <select ng-model="product_details.ProductControlMethod" ng-options="optionOfControl.value as optionOfControl.optionText for optionOfControl in TypeOfControlMethod" required="required" name="controlMethod" class="form-control">
                                <option value="">(Pick One Control Method)</option>
                            </select>
                        </div><span ng-show="productForm.controlMethod.$touched &amp;&amp; productForm.controlMethod.$invalid">Please select control Method</span>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">
                            Type of Treatment Method<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <label style="display: block" ng-repeat="object in TypeOfTreatmentMethod">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedTreatmentMethod()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>
                        
                        <span ng-show="productForm.treatmentStrategy.$touched &amp;&amp; productForm.treatmentStrategy.$invalid">Please select treatment method</span>
                    </div>
                    <div ng-show="isbroadcast" class="form-group row">
                        <div class="form-group row">
                            <label for="b_minUseRate" class="col-sm-5 control-label text-right">
                                Broadcast Minimum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="b_minUseRate" type="number" placeholder="Enter Minimum Use Rate" ng-model="product_details.B_ProductMinUseRate" required="treatment2 == 1" name="b_minUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="b_maxUseRate" class="col-sm-5 control-label text-right">
                                Broadcast Maximum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="b_maxUseRate" type="number" placeholder="Enter Maximum Use Rate" ng-model="product_details.B_ProductMaxUseRate" required="treatment2 == 1" name="b_maxUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="b_measurementUnitValue" class="col-sm-5 control-label text-right">
                                Broascast Measurement Unit<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <select ng-model="product_details.B_ProductMeasurementUnit" ng-options="measurementUnit.value as measurementUnit.optionText for measurementUnit in B_TypeOfMeasurementUnit" required="required" name="b_measurementUnitValue" class="form-control">
                                    <option value="">(Pick One Type of Measurement Unit)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div ng-show="ismound" class="form-group row">
                        <div class="form-group row">
                            <label for="m_minUseRate" class="col-sm-5 control-label text-right">
                                Mound Minimum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="m_minUseRate" type="number" placeholder="Enter Minimum Use Rate" ng-model="product_details.M_ProductMinUseRate" required="treatment2 == 1" name="m_minUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="m_maxUseRate" class="col-sm-5 control-label text-right">
                                Mound Maximum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="m_maxUseRate" type="number" placeholder="Enter Maximum Use Rate" ng-model="product_details.M_ProductMaxUseRate" required="treatment2 == 1" name="m_maxUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="m_measurementUnitValue" class="col-sm-5 control-label text-right">
                                Mound Measurement Unit<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <select ng-model="product_details.M_ProductMeasurementUnit" ng-options="measurementUnit.value as measurementUnit.optionText for measurementUnit in M_TypeOfMeasurementUnit" required="required" name="m_measurementUnitValue" class="form-control">
                                    <option value="">(Pick One Type of Measurement Unit)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div ng-show="treatment2" class="form-group row">
                        <div class="form-group row">
                            <label for="b_minUseRate" class="col-sm-5 control-label text-right">
                                Broadcast Minimum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="b_minUseRate" type="number" placeholder="Enter Minimum Use Rate" ng-model="product_details.B_ProductMinUseRate" required="treatment2 == 1" name="b_minUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="b_maxUseRate" class="col-sm-5 control-label text-right">
                                Broadcast Maximum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="b_maxUseRate" type="number" placeholder="Enter Maximum Use Rate" ng-model="product_details.B_ProductMaxUseRate" required="treatment2 == 1" name="b_maxUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="b_measurementUnitValue" class="col-sm-5 control-label text-right">
                                Broascast Measurement Unit<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <select id="B_ProductMeasurementUnit" ng-model="product_details.B_ProductMeasurementUnit" ng-options="measurementUnit.value as measurementUnit.optionText for measurementUnit in B_TypeOfMeasurementUnit" required="required" name="b_measurementUnitValue" class="form-control">
                                    <option value="">(Pick One Type of Measurement Unit)</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="m_minUseRate" class="col-sm-5 control-label text-right">
                                Mound Minimum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="m_minUseRate" type="number" placeholder="Enter Minimum Use Rate" ng-model="product_details.M_ProductMinUseRate" required="treatment2 == 1" name="m_minUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="m_maxUseRate" class="col-sm-5 control-label text-right">
                                Mound Maximum Use Rate<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <input id="m_maxUseRate" type="number" placeholder="Enter Maximum Use Rate" ng-model="product_details.M_ProductMaxUseRate" required="treatment2 == 1" name="m_maxUseRate" ng-pattern="/^[0-9]{1,10}$/" class="form-control" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="m_measurementUnitValue" class="col-sm-5 control-label text-right">
                                Mound Measurement Unit<span>*</span>
                            </label>
                            <div class="col-sm-7">
                                <select ng-model="product_details.M_ProductMeasurementUnit" ng-options="measurementUnit.value as measurementUnit.optionText for measurementUnit in M_TypeOfMeasurementUnit" required="required" name="m_measurementUnitValue" class="form-control">
                                    <option value="">(Pick One Type of Measurement Unit)</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-5 control-label text-right">
                            Type of use of land<span>*</span>
                        </label>
                        <div class="col-sm-7">
                            <label style="display: block" ng-repeat="object in TypeOfLand">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedTypeOfLand()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>
                        <span ng-show="productForm.tyeOfUse.$touched &amp;&amp; productForm.tyoeOfUse.$invalid">Please select type of use</span>
                    </div>
                     <div ng-show="isurban" class="form-group row">
                      
                        <label class="col-sm-12">
                            Type of Urban Treatment Site<span>*</span>
                        </label>
                        <div class="col-sm-6" style="padding-left: 10%;">
                             <div style="text-align: center;"><b>Broadcast </b></div>
                            <label style="display: block" ng-repeat="object in TypeOfUrbanTreatmentSiteB">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedUrbanSitesBroadcast()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>
                        <div class="col-sm-6" style="border-left: 1px black solid;">
                            @*<div style="border-left:1px black solid;height:100%;padding-left: 15%;" />*@
                            <div style="text-align: center;"><b>Mound </b></div>
                            <label style="display: block" ng-repeat="object in TypeOfUrbanTreatmentSiteM">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedUrbanSitesMound()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>
                         <div class="divide30"></div> 

                    </div>
                   <div ng-show="isagri" class="form-group row">
                       <label class="col-sm-12">
                            Type of Agricultural Treatment Site<span>*</span>
                        </label>
                        <div class="col-sm-6" style="padding-left: 10%;">
                            <div style="text-align: center;"><b>Broadcast </b></div>
                            <label style="display: block" ng-repeat="object in TypeOfAgricultureTreatmentSiteB">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedAgriSitesBroadcast()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>
                       
                        <div class="col-sm-6" style="border-left: 1px black solid;">
                            @* <div style="border-left:1px black solid;height:100%;padding-left: 15%;" />*@
                            <div style="text-align: center;"><b >Mound </b></div>
                            <label style="display: block" ng-repeat="object in TypeOfAgricultureTreatmentSiteM">
                                <input type="checkbox" name="{{object.value}}" id="{{object.value}}" ng-model="object.checked" ng-change="selectedAgriSitesMound()">
                                <label for="{{object.value}}">{{object.optionText}}</label>
                            </label>
                        </div>

                        <span ng-show="productForm.typeOfAgri.$touched &amp;&amp; productForm.typeOfAgri.$invalid">Please select type of use</span>
                    </div>
                     

                   
                    <div class="divide10"></div>        
                    
                </form>
            </div>
            <div class="modal-footer">
                <div class="row">
                <div style="float:right; padding-left: 2%;">
                     <button  type="button" data-dismiss="modal" class="btn btn-default">Close</button>
                </div>
               
                <div style="float:right" ng-if="isedit==false" >
                    <button  id="SubmitProduct" input type="submit" class="btn btn-theme-bg" ng-click="SubmitProduct()">Add Product </button>
                </div>
                <div style="float:right" ng-if="isedit==true">
                    <button  id="SubmitProduct" input type="submit" class="btn btn-theme-bg" ng-click="EditProductFinal()">Edit Product </button>
                </div></div>
                
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $('document').ready(function () {
        @*if ('@(TempData["Value"])' == 1) {
            $('#product_sucess').toggle();
        }*@
        

        $('#ProductsList').each(function () {
            var Column_number_to_Merge = 1;

            // Previous_TD holds the first instance of same td. Initially first TD=null.
            var Previous_TD = null;
            var i = 1;
            $("tbody", this).find('tr').each(function () {
                // find the correct td of the correct column
                // we are considering the table column 1, You can apply on any table column
                var Current_td = $(this).find('td:nth-child(' + Column_number_to_Merge + ')');

                if (Previous_TD == null) {
                    // for first row
                    Previous_TD = Current_td;
                    i = 1;
                }
                else if (Current_td.text().toUpperCase() == Previous_TD.text().toUpperCase()) {
                    // the current td is identical to the previous row td
                    // remove the current td
                    Current_td.remove();
                    // increment the rowspan attribute of the first row td instance
                    Previous_TD.attr('rowspan', i + 1);
                    i = i + 1;
                }
                else {
                    // means new value found in current td. So initialize counter variable i
                    Previous_TD = Current_td;
                    i = 1;
                }
            });
        });

    });

    var polygonManagerApp = angular.module("productManagerApp", []);
   
    console.log("inside productmaanager");
   
    polygonManagerApp.controller("productDefaultCtrl", function ($scope,$filter) {
        var $productModal = $("#add-product-modal");
        $scope.isedit = false;
        $scope.AddProduct = function () {
            $scope.isedit = false;
            $scope.isagri = false;
            $scope.isurban = false;
            $scope.ismound = false;
            $scope.isbroadcast = false;
            $scope.treatment2 = false;
            //$('#add-product-modal').find("input,textarea,select")
            //                       .val('')
            //                       .end()
            //                        .find("input[type=checkbox], input[type=radio]")
            //                       .prop("checked", "")
            //                       .end();
            $('#add-product-modal').find("input[type=checkbox], input[type=radio]")
                                    .prop("checked", "")
                                    .end();
            $scope.refreshForm();
            console.log($scope.isbroadcast);
            
            $('#add-product-modal').modal("show");
        }
        $scope.refreshForm = function () {
            $scope.product_details = {
                ProductId: 0,
                ProductName: "",
                ProductManufacturer: "",
                PhysicalForm: "",
                PesticideClassification: "",
                ProductControlMethod: "",
                ProductTreatmentMethod: [],
                ActiveIngredient: "",
                B_ProductMinUseRate: "",
                B_ProductMaxUseRate: "",
                B_ProductMeasurementUnit: "",
                M_ProductMinUseRate: "",
                M_ProductMaxUseRate: "",
                M_ProductMeasurementUnit: "",
                ProductUrl: "",
                IsSynthetic: "",
                IsSyntheticValue: false,
                UrbanTreatmentSitesBroadcast: [],
                UrbanTreatmentSitesMound: [],
                AgriTreatmentSitesBroadcast: [],
                AgriTreatmentSitesMound: [],
                TypeOfLand: [],
                MoundNumber: 0,
                Notes: "",
                TypeOfAgri: ""
            };
            $scope.TypeOfLand = [
             { value: "urban", optionText: "Urban Land" },
             { value: "agricultural", optionText: "Agricultural Land" }
            ];
            $scope.TypeOfAgriLand = [
             { value: "food", optionText: "Food Producing Land" },
             { value: "nonfood", optionText: "Non Food Producing Land" }
            ];


            $scope.TypeOfUrbanTreatmentSiteB = [
            { value: "home_lawns", optionText: "Home Lawns / Ornamentals" },
            { value: "perimeter", optionText: "Perimeter" },
            { value: "rec", optionText: "Recreational Areas" },
            { value: "right_of_way", optionText: "Right of Way" }
            ];
            $scope.TypeOfUrbanTreatmentSiteM = [
           { value: "home_lawns", optionText: "Home Lawns / Ornamentals" },
           { value: "perimeter", optionText: "Perimeter" },
           { value: "rec", optionText: "Recreational Areas" },
           { value: "right_of_way", optionText: "Right of Way" }
            ];
            $scope.B_TypeOfMeasurementUnit = [
            { value: "lb/acre", optionText: "lb/acre" },
            { value: "sq ft", optionText: "sq ft" }
            ];

            $scope.M_TypeOfMeasurementUnit = [
           { value: "TBSP/mound", optionText: "TBSP/mound" },
           { value: "TSP/mound", optionText: "TSP/mound" }
            ];

            $scope.TypeOfAgricultureTreatmentSiteB = [
           { value: "pasture", optionText: "Pasture Land" },
           { value: "poultry", optionText: "Poultry Houses" },
           { value: "crop", optionText: "Crop Areas" },
           { value: "sod", optionText: "Sod / Turf" },
           { value: "nursery_container", optionText: "Nursery Container" },
           { value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)" },
           { value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)" }
            ];
            $scope.TypeOfAgricultureTreatmentSiteM = [
          { value: "pasture", optionText: "Pasture Land" },
          { value: "poultry", optionText: "Poultry Houses" },
          { value: "crop", optionText: "Crop Areas" },
          { value: "sod", optionText: "Sod / Turf" },
          { value: "nursery_container", optionText: "Nursery Container" },
          { value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)" },
          { value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)" }
            ];

            $scope.TypeOfControlMethod = [
              { value: "bait", optionText: "Bait and Sterilize Queen", explaination: "worker ants send product to queen. Queen eats and then unable to give birth to new ants" },
              { value: "contact", optionText: "Kill by Direct Contact", explaination: "When fire ants have been in contact with the ingredients of products, they are killed" },
            ];

            $scope.SyntheticNatural = [
              { value: "synthetic", optionText: "Synthetic", explaination: "worker ants send product to queen. Queen eats and then unable to give birth to new ants" },
              { value: "natural", optionText: "Natural", explaination: "When fire ants have been in contact with the ingredients of products, they are killed" },
            ];

            $scope.TypeOfPestClass = [
              { value: "unrestricted", optionText: "Unrestricted", explaination: "worker ants send product to queen. Queen eats and then unable to give birth to new ants" },
              { value: "restricted", optionText: "Restricted", explaination: "When fire ants have been in contact with the ingredients of products, they are killed" },
            ];
            $scope.TypeOfTreatmentMethod = [
              { value: "broadcast", optionText: "Broadcast Treatment", explaination: "worker ants send product to queen. Queen eats and then unable to give birth to new ants"},
              { value: "imt", optionText: "Individual Mound Treatment", explaination: "When fire ants have been in contact with the ingredients of products, they are killed"},
            ];

            $scope.PhysicalForm = [
          { value: "Granular", optionText: "Granular" },
          { value: "Dust", optionText: "Dust" },
          { value: "Liquid", optionText: "Liquid" }
            ];
        }
     
        $scope.selectedUrbanSitesBroadcast = function () {
            $scope.product_details.UrbanTreatmentSitesBroadcast = $filter('filter')($scope.TypeOfUrbanTreatmentSiteB, { checked: true });
            console.log($scope.product_details.UrbanTreatmentSites);
        }
        $scope.selectedUrbanSitesMound = function () {
            $scope.product_details.UrbanTreatmentSitesMound = $filter('filter')($scope.TypeOfUrbanTreatmentSiteM, { checked: true });
            console.log($scope.product_details.UrbanTreatmentSites);
        }

        $scope.selectedAgriSitesBroadcast = function () {
            $scope.product_details.AgriTreatmentSitesBroadcast = $filter('filter')($scope.TypeOfAgricultureTreatmentSiteB, { checked: true });
            console.log($scope.product_details.AgriTreatmentSites);
        }
        $scope.selectedAgriSitesMound = function () {
            $scope.product_details.AgriTreatmentSitesMound = $filter('filter')($scope.TypeOfAgricultureTreatmentSiteM, { checked: true });
            console.log($scope.product_details.AgriTreatmentSites);
        }

        $scope.selectedTypeOfLand = function () {
            console.log($scope.TypeOfLand);
            $scope.isagri = false; $scope.isurban = false;
            $scope.product_details.TypeOfLand = $filter('filter')($scope.TypeOfLand, { checked: true });
            console.log($scope.product_details.TypeOfLand);
            var i=0;
            //if($scope.product_details.TypeOfLand.length==2){
            //    $scope.land_value=true;
            //}
            //else
            //{
            for (var i = 0; i < $scope.product_details.TypeOfLand.length; i++) {
                console.log($scope.product_details.TypeOfLand);
                    if ($scope.product_details.TypeOfLand[i].value.trim() == "urban") {
                        $scope.isurban = true;
                    }
                    else if ($scope.product_details.TypeOfLand[i].value.trim() == "agricultural") {

                        $scope.isagri = true;
                    }
            }
            console.log($scope.isurban, $scope.isagri);
            //}

        }
        $scope.selectedTreatmentMethod = function () {
            $scope.treatment2 = false;
            $scope.isbroadcast = false;
            $scope.ismound = false;
            $scope.product_details.ProductTreatmentMethod = $filter('filter')($scope.TypeOfTreatmentMethod, { checked: true });
            console.log($scope.product_details.ProductTreatmentMethod);
            var i=0;
            if($scope.product_details.ProductTreatmentMethod.length==2){
                $scope.treatment2=true;
            }
            else
            {
                console.log($scope.product_details.ProductTreatmentMethod[0]);
                if ($scope.product_details.ProductTreatmentMethod.length != 0) {   //console.log($scope.product_details.ProductTreatmentMethod[0].value);
                    if ($scope.product_details.ProductTreatmentMethod[0].value == "broadcast") {
                        $scope.isbroadcast = true;
                    }
                    else if ($scope.product_details.ProductTreatmentMethod[0].value == "imt") {
                        
                        $scope.ismound = true;
                    }
                }
            } 
        }

        $scope.SubmitProduct = function () {
            $scope.isedit = false;
            if ($scope.product_details.IsSynthetic == "synthetic") {
                $scope.product_details.IsSyntheticValue=true;
            }
            console.log(typeof (JSON.stringify($scope.product_details)));
            console.log($scope.product_details);
            alert("hello");
            $.ajax({
                type: "POST",
                url: '@(Url.Action("AddProduct", "Product"))',
                data: { ProductDetails: JSON.stringify($scope.product_details)},
                success: function (result) {
                    location.href = "/Product/ProductIndex";
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // myfunction();
                    alert("jg" + errorThrown);
                }
             });
        }
        
        $scope.EditProductFinal = function () {
            $scope.isedit = true;
            console.log($scope.product_details);
            console.log(typeof (JSON.stringify($scope.product_details)));
            
            alert("hello");
            $.ajax({
                type: "POST",
                url: '@(Url.Action("EditProduct", "Product"))',
                data: { ProductDetails: JSON.stringify($scope.product_details) },
                success: function (result) {

                    location.href = "/Product/ProductIndex";

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // myfunction();
                    alert("jg" + errorThrown);
                }
            });
        }

        $scope.GetUrbanTreatmentSites = function (urban_string_broadcast, urban_string_mound) {
            console.log(urban_string_broadcast, urban_string_mound);
            $scope.product_details.UrbanTreatmentSitesBroadcast = [];
            $scope.product_details.UrbanTreatmentSitesMound = [];
            $scope.TypeOfUrbanTreatmentSiteB = [];
            $scope.TypeOfUrbanTreatmentSiteM = [];
            $scope.TypeOfUrbanTreatmentSiteB = [
                { value: "home_lawns", optionText: "Home Lawns / Ornamentals",checked:false },
                { value: "perimeter", optionText: "Perimeter", checked: false },
                { value: "rec", optionText: "Recreational Areas", checked: false },
                { value: "right_of_way", optionText: "Right of Way", checked: false }
            ];
            $scope.TypeOfUrbanTreatmentSiteM = [
               { value: "home_lawns", optionText: "Home Lawns / Ornamentals", checked: false },
               { value: "perimeter", optionText: "Perimeter", checked: false },
               { value: "rec", optionText: "Recreational Areas", checked: false },
               { value: "right_of_way", optionText: "Right of Way", checked: false }
            ];
            var urban_broadcast = urban_string_broadcast.split(",");
            var urban_mound = urban_string_mound.split(",");
            console.log(urban_broadcast);
            console.log(urban_mound);

            if (urban_broadcast.length != 0) {

                for (var i = 0; i < urban_broadcast.length; i++) {
                    if (urban_broadcast[i].trim() == "Home Lawns / Ornamentals") {
                        $scope.product_details.UrbanTreatmentSitesBroadcast.push({ value: "home_lawns", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteB[0].checked = true;
                    }
                    else if (urban_broadcast[i].trim() == "Perimeter") {
                        $scope.product_details.UrbanTreatmentSitesBroadcast.push({ value: "perimeter", optionText: "Perimeter", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteB[1].checked = true;
                    }
                    else if (urban_broadcast[i].trim() == "Recreational Areas") {
                        $scope.product_details.UrbanTreatmentSitesBroadcast.push({ value: "rec", optionText: "Recreational Areas", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteB[2].checked = true;
                    }
                    else {
                        $scope.product_details.UrbanTreatmentSitesBroadcast.push({ value: "right_of_way", optionText: "Right of Way", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteB[3].checked = true;
                    }
                }
            }

            if (urban_mound.length != 0) {

                for (var i = 0; i < urban_mound.length; i++) {
                    if (urban_mound[i].trim() == "Home Lawns / Ornamentals") {
                        $scope.product_details.UrbanTreatmentSitesMound.push({ value: "home_lawns", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteM[0].checked = true;
                    }
                    else if (urban_mound[i].trim() == "Perimeter") {
                        $scope.product_details.UrbanTreatmentSitesMound.push({ value: "perimeter", optionText: "Perimeter", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteM[1].checked = true;
                    }
                    else if (urban_mound[i].trim() == "Recreational Areas") {
                        $scope.product_details.UrbanTreatmentSitesMound.push({ value: "rec", optionText: "Recreational Areas", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteM[2].checked = true;
                    }
                    else {
                        $scope.product_details.UrbanTreatmentSitesMound.push({ value: "right_of_way", optionText: "Right of Way", checked: true });
                        $scope.TypeOfUrbanTreatmentSiteM[3].checked = true;
                    }
                }
            }
            return;
        }

        $scope.GetAgriTreatmentSites = function (agri_string_broadcast, agri_string_mound) {
            console.log(agri_string_broadcast, agri_string_mound);
            $scope.product_details.AgriTreatmentSitesBroadcast= [];
            $scope.product_details.AgriTreatmentSitesMound= [];
            $scope.TypeOfAgricultureTreatmentSiteB = [];
            $scope.TypeOfAgricultureTreatmentSiteM = [];

            $scope.TypeOfAgricultureTreatmentSiteB = [
                { value: "pasture", optionText: "Pasture Land" , checked: false},
                { value: "poultry", optionText: "Poultry Houses", checked: false },
                { value: "crop", optionText: "Crop Areas", checked: false },
                { value: "sod", optionText: "Sod / Turf", checked: false },
                { value: "nursery_container", optionText: "Nursery Container", checked: false },
                { value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)", checked: false },
                { value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)", checked: false }
            ];
            $scope.TypeOfAgricultureTreatmentSiteM = [
            { value: "pasture", optionText: "Pasture Land", checked: false },
            { value: "poultry", optionText: "Poultry Houses", checked: false },
            { value: "crop", optionText: "Crop Areas", checked: false },
            { value: "sod", optionText: "Sod / Turf", checked: false },
            { value: "nursery_container", optionText: "Nursery Container", checked: false },
            { value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)", checked: false },
            { value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)", checked: false }
            ];
            
            var agri_broadcast = agri_string_broadcast.split(",");
            var agri_mound = agri_string_mound.split(",");
            console.log(agri_broadcast);
            console.log(agri_mound);

            if (agri_string_broadcast.length != 0) {

                for (var i = 0; i < agri_broadcast.length; i++) {
                    if (agri_broadcast[i].trim() == "Pasture Land") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "pasture", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[0].checked = true;
                    }
                    else if (agri_broadcast[i].trim() == "Poultry Houses") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "poultry", optionText: "Poultry Houses", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[1].checked = true;
                    }
                    else if (agri_broadcast[i].trim() == "Crop Areas") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "crop", optionText: "Crop Areas", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[2].checked = true;
                    }
                    else if (agri_broadcast[i].trim() == "Sod/Turf") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "sod", optionText: "Sod / Turf", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[3].checked = true;
                    }
                    else if (agri_broadcast[i].trim() == "Nursery Container") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "nursery_container", optionText: "Nursery Container", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[4].checked = true;
                    }
                    else if (agri_broadcast[i].trim() == "Nursery B & B (Ball & Burlap)") {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[5].checked = true;
                    }
                    else {
                        $scope.product_details.AgriTreatmentSitesBroadcast.push({ value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteB[6].checked = true;
                    }
                }
            }

            if (agri_mound.length != 0) {

                for (var i = 0; i < agri_mound.length; i++) {
                    if (agri_mound[i].trim() == "Pasture Land") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "pasture", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[0].checked = true;
                    }
                    else if (agri_mound[i].trim() == "Poultry Houses") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "poultry", optionText: "Poultry Houses", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[1].checked = true;
                    }
                    else if (agri_mound[i].trim() == "Crop Areas") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "crop", optionText: "Crop Areas", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[2].checked = true;
                    }
                    else if (agri_mound[i].trim() == "Sod/Turf") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "sod", optionText: "Sod / Turf", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[3].checked = true;
                    }
                    else if (agri_mound[i].trim() == "Nursery Container") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "nursery_container", optionText: "Nursery Container", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[4].checked = true;
                    }
                    else if (agri_mound[i].trim() == "Nursery B & B (Ball & Burlap)") {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "nursery_bb", optionText: "Nursery B & B (Ball & Burlap)", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[5].checked = true;
                    }
                    else {
                        $scope.product_details.AgriTreatmentSitesMound.push({ value: "other", optionText: "Other ( Fences / Rows / Ditches / Out Buildings)", checked: true });
                        $scope.TypeOfAgricultureTreatmentSiteM[6].checked = true;
                    }
                }
            }
            return;
        }
        $scope.EditProduct=function(product_id,ProductName,ActiveIngredient,ProductManufacturer,ProductUrl,PhysicalForm,PesticideClassification,
                             ProductControlMethod, IsSynthetic, TypeOfLand2, ProductTreatmentMethod, UrbanTreatmentSitesBroadcast, UrbanTreatmentSitesMound, AgriTreatmentSitesBroadcast, AgriTreatmentSitesMound, B_ProductMinUseRate, B_ProductMaxUseRate, B_ProductMeasurementUnit,
                             M_ProductMinUseRate, M_ProductMaxUseRate, M_ProductMeasurementUnit) {

            if (product_id == 53) {
                console.log("found maria");
                console.log(M_ProductMeasurementUnit);
            }

            $scope.isedit = 1;
            $scope.refreshForm();
            $scope.TypeOfLand = []; $scope.TypeOfTreatmentMethod = [];
            //document.getElementById("broadcast").checked = false;
            //document.getElementById("imt").checked = false;
           
            $scope.treatment2 = false; $scope.isbroadcast = false; $scope.ismound = false;
            $scope.land_value = false; $scope.isagri = false; $scope.isurban = false;

            $scope.product_details.ProductId = product_id;
            $scope.product_details.ProductName = ProductName;
            $scope.product_details.ActiveIngredient = ActiveIngredient;
            $scope.product_details.ProductManufacturer = ProductManufacturer;
            $scope.product_details.ProductUrl = ProductUrl;
            //$scope.product_details.PhysicalForm = PhysicalForm;
            
            if (PesticideClassification == "UnRestricted") {
                $scope.product_details.PesticideClassification = "unrestricted";
            }
            else {
                $scope.product_details.PesticideClassification = "restricted";
            }

            if (PhysicalForm.toLowerCase().trim() == "granular") {
                $scope.product_details.PhysicalForm = "Granular";
            }
            else if (PhysicalForm.toLowerCase().trim() == "dust") {
                $scope.product_details.PhysicalForm = "Dust";
            }
            else {
                $scope.product_details.PhysicalForm = "Liquid";
            }
            console.log(ProductControlMethod);
            if (ProductControlMethod.toLowerCase().trim() == "bait") {
                $scope.product_details.ProductControlMethod="bait"
            }
            else {
                $scope.product_details.ProductControlMethod = "contact";
            }
            
            if (IsSynthetic == "Synthetic") {
                $scope.product_details.IsSyntheticValue = true;
                $scope.product_details.IsSynthetic="synthetic"
            }
            else {
                $scope.product_details.IsSyntheticValue = false;
                $scope.product_details.IsSynthetic = "natural"
            }
            console.log(TypeOfLand2);
            var abc = [];
            abc=TypeOfLand2.split(",");
            TypeOfLand2 = abc;
            console.log(TypeOfLand2);
            $scope.TypeOfLand = [];
            $scope.TypeOfLand.push({ value: "urban", optionText: "Urban Land", checked: false });
            $scope.TypeOfLand.push({ value: "agricultural", optionText: "Agricultural Land", checked: false });
            for(var i=0;i<TypeOfLand2.length;i++){    
                if (TypeOfLand2[i].toLowerCase().trim() == "urban") {
                    $scope.product_details.TypeOfLand.push({ value: "urban", checked: true });
                    $scope.TypeOfLand[0].checked = true;
                    $scope.isurban = true;
                    $scope.GetUrbanTreatmentSites(UrbanTreatmentSitesBroadcast, UrbanTreatmentSitesMound);
                }
                else {
                    $scope.product_details.TypeOfLand.push({ value: "agricultural", checked: true });
                    $scope.TypeOfLand[1].checked = true;
                    $scope.GetAgriTreatmentSites(AgriTreatmentSitesBroadcast, AgriTreatmentSitesMound);
                    $scope.isagri = true;
                }
            }
            
            
            var xyz = [];
            xyz=ProductTreatmentMethod.split(",");
            ProductTreatmentMethod = xyz;
            console.log("here++" + ProductTreatmentMethod + typeof (ProductTreatmentMethod) + M_ProductMeasurementUnit.substring(0, 4));
            $scope.TypeOfTreatmentMethod.push({ value: "broadcast", optionText: "Broadcast Treatment", explaination: "worker ants send product to queen. Queen eats and then unable to give birth to new ants", checked: false });
            $scope.TypeOfTreatmentMethod.push({ value: "imt", optionText: "Individual Mound Treatment", explaination: "When fire ants have been in contact with the ingredients of products, they are killed", checked: false });
            for (var i = 0; i < ProductTreatmentMethod.length; i++) {
                console.log(ProductTreatmentMethod[i]);
                if (ProductTreatmentMethod[i].toLowerCase().trim() == "mound") {
                    console.log("measurement unit:"+M_ProductMeasurementUnit)
                    $scope.product_details.ProductTreatmentMethod.push({ value: "imt", checked: true });
                    $scope.TypeOfTreatmentMethod[1].checked = true;
                    $scope.product_details.M_ProductMinUseRate = M_ProductMinUseRate;
                    $scope.product_details.M_ProductMaxUseRate = M_ProductMaxUseRate;
                    if (M_ProductMeasurementUnit.substring(0,4).toUpperCase().trim() == "TBSP") {
                        $scope.product_details.M_ProductMeasurementUnit = "TBSP/mound";
                    }
                    else {
                        $scope.product_details.M_ProductMeasurementUnit = "TSP/mound";
                    }
                    $scope.product_details.M_ProductMeasurementUnit = M_ProductMeasurementUnit;
                    $scope.ismound = true;
                }
                else {
                    $scope.product_details.ProductTreatmentMethod.push({ value: "broadcast", checked: true });
                    $scope.TypeOfTreatmentMethod[0].checked = true;
                    $scope.product_details.B_ProductMinUseRate = B_ProductMinUseRate;
                    $scope.product_details.B_ProductMaxUseRate = B_ProductMaxUseRate;
                    console.log(B_ProductMeasurementUnit);
                    if (B_ProductMeasurementUnit.trim() == "lb/acre") {
                        $scope.product_details.B_ProductMeasurementUnit = "lb/acre";
                    }
                    else if (B_ProductMeasurementUnit.trim() == "sq ft") {
                        $scope.product_details.B_ProductMeasurementUnit = "sq ft";
                    }
                    $scope.isbroadcast = true;
                }
             }
            
            console.log($scope.product_details);
            setTimeout(function () { $('#add-product-modal').modal("show"); }, 100);
         }

        $scope.DeleteProduct = function (product_id) {
            $.ajax({
                type: "POST",
                url: '@(Url.Action("DeleteProduct", "Product"))',
                data: { ProductId:product_id },
                success: function (result) {

                    //var TempPolygon = { id: result, geometry: obj.geometry, properties: obj.properties, type: obj.type };
                    //console.log(TempPolygon)
                    //alert(result);

                    //var x = document.getElementById('product_sucess');
                    //console.log(x.style.display);
                    //alert("uh");
                    ////if (x.style.display === 'none') {
                    ////    x.style.display = 'block';
                    ////} else {
                    ////    x.style.display = 'none';
                    ////}

                    location.href = "/Product/ProductIndex";

                },
                error: function (jqXHR, textStatus, errorThrown) {
                    // myfunction();
                    alert("jg" + errorThrown);
                }
            });
        }
    });
</script>



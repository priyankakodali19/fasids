@model WebApplication3.Models.ViewModel.DisplayUserPolygon

<script src="~/scripts/underscore-min.js"></script>
<script src="~/scripts/backbone-min.js"></script>

<script src="~/scripts/mapcover.js"></script>

<link href="~/Content/InteractiveLandscape.css" rel="stylesheet" />
<!-- This is used to indicate current page status, such as whether user logged in or not-->
<meta name="page_status" content="#{JSON.stringify(page_status)}" />
<!-- This is used to retrieve target polygon, when user click their polygon in their user profile-->
<meta id="target_polygon" name="target_polygon" content="#{JSON.stringify(target_polygon)}" />

<script type="text/javascript">
    var host = window.location.pathname;
    var path2 = host.substring(0,host.lastIndexOf("/"));
    var path = path2.substring(path2.lastIndexOf("/") + 1);
    var polygon_id=host.substring(host.lastIndexOf("/")+1);

     var abc = { model_op: "patch", isAuthenticated: true };
        var coordinates_array=[], temp=[], temp2=[];
        var coordinates = '@Model.coordinates_str';
        coordinates = coordinates.substr(10, coordinates.length-2);
        coordinates = coordinates.substr(0, coordinates.length - 2);
        var points = coordinates.substr(0, coordinates.length - 2).split(", ");
        console.log(coordinates);
        coordinates_array = points.map(function (pointString) {
            var latlon = pointString.split(" ");
            //console.log(pointString);
            console.log(pointString)
            temp.push([parseFloat(latlon[0]), parseFloat(latlon[1])]);
            return latlon;
            });

        temp2.push(temp);
        
        var temp_properties = {
            address: '@Model.Address',
            bounds: {
                ne: { lat: parseFloat('@Model.Bounds_NE_Lat'), lng: parseFloat('@Model.Bounds_NE_Lng') },
                sw: { lat: parseFloat('@Model.Bounds_SW_Lat'), lng: parseFloat('@Model.Bounds_SW_Lng') }
            },
            control_method: '@Model.ControlMethod',
            enivronment_map: {
                MapTypeId: '@Model.EnvMapTypeId',
                tilt: '@Model.EnvMapTilt'
            },
            is_outdoor: '@Model.IsOutdoor',
            mound_density: '@Model.MoundDensity',
            mound_number: '@Model.MoundNumber',
            need_organic: '@Model.NeedOrganic',
            need_safe_for_pets: '@Model.NeedSafeForPets',
            notes: '@Model.Notes',
            owner: '@Model.UserId',
            polygon_name: '@Model.PolygonName',
            total_area: '@Model.TotalArea',
            type_of_use: '@Model.TypeOfUse',
            usage: '@Model.Usage'
        }

        var TempPolygon = {
            id: '@Model.GeoJsonId', 
            geometry: { coordinates: temp2, type: '@Model.GeometryType' },
            properties: temp_properties,
            type: '@Model.Type'
        };
       
</script>

<div class="divide30"></div>
<div id="mapcontainer" class="mapcontainer"></div>
<div class="divide30"></div>

<script type="text/javascript">
    $(document).ready(function onDocReady() {

        
        function colorOf(type_of_use) {
            var fillColor = "#000000";
            switch (type_of_use) {
                case "agricultural":
                    fillColor = "#0000FF";
                    break;
                case "home":
                    fillColor = "#FFFF00";
                    break;
                case "professional":
                    fillColor = "#33CC33";
                    break;
                default:
                    fillColor = "#000000";
            }
            return fillColor;
        }



        var gmap = new google.maps.Map(document.getElementById("mapcontainer"), {
            scrollwheel: false,
            draggingCursor: "move",
            draggableCursor: "auto",
            center: { lat: 20.62060000, lng: -96.32621 },
            zoom: 15,
            zoomControl: false,    //left side
            panControl: false,     //left top corner: 
            mapTypeControl: false  //right top corner: "map|satellite"
        });
        var target_geojson = {};
        try {
            var target_geojson = TempPolygon;
            console.log(target_geojson)
        } catch (e) {
            alert("JSON.parse failure at target_geojson initialization");
        }
        var bounds = new google.maps.LatLngBounds(target_geojson.properties.bounds.sw, target_geojson.properties.bounds.ne);
        gmap.fitBounds(bounds);

        // var target_geojson_gfeature = new google.maps.Data.Feature(target_geojson);

        gmap.data.addGeoJson(target_geojson);

        gmap.data.setStyle(function featureStyleFor(feature) {
            return ({
                fillColor: colorOf(feature.getProperty("type_of_use")),
                strokeColor: "#FF0000",
                strokeWeight: 2
            });
        });
        gmap.data.addListener('click', function (event) {
            location.href = "/InteractiveLandscape/LandscapeManagement/" + polygon_id;
        });
    });
</script>
